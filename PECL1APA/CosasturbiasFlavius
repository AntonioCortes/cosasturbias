#include "cuda_runtime.h"
#include "device_launch_parameters.h"
#include <stdio.h>
#include <iostream>
#include <time.h>
#include <stdlib.h>
#include <windows.h>

#define AZUL 1
#define ROJO 2
#define NARANJA 3
#define VERDE 4
#define MARRON 5
#define AMARILLO 6

void juego(const int filas, const int columnas, int num_colores, bool cargar_partida);
void generar_matriz(int *& matriz, int tam_matriz, int num_colores);
void dibujar_matriz(int * matriz, int filas, int columnas);
void jugar(int *tablero, int fil, int col, int size, int fila, int columna);


__global__ void KernelJugar(int *tablero, int fila, int columna, int i, int j);

__device__ void comprobarBloques(int *tablero, int x, int y, int fila, int columna);

__device__ void comprobarBloquesArriba(int *tablero, int x, int y, int fila, int columna);

__device__ void comprobarBloquesDerecha(int *tablero, int x, int y, int fila, int columna);

__device__ void comprobarBloquesIzquierda(int *tablero, int x, int y, int fila, int columna);

__device__ void comprobarBloquesAbajo(int *tablero, int x, int y, int fila, int columna);



int main(int argc, char ** argv)
{
	int dificultad = 0;
	int filas = 0;
	int columnas = 0;
	int opcion = 0;

	//SetConsoleDisplayMode(GetStdHandle(STD_OUTPUT_HANDLE), CONSOLE_FULLSCREEN_MODE, 0);
	srand(time(NULL));

	printf("Seleccione 1 para empezar una nueva partida o 2 para cargar partida\n");
	scanf("%i", &opcion);

	if (opcion == 1)
	{
		do
		{
			printf("Introduzca nivel de dificultad (1 o 2): ");
			scanf("%i", &dificultad);

			if ((dificultad != 1) && (dificultad != 2))
			{
				printf("Error al elegir nivel de dificultad\n");
				//system("cls");
			}

		} while ((dificultad != 1) && (dificultad != 2));

		printf("Introduzca el numero de filas y columnas del tablero\n");
		printf("Filas: ");
		scanf("%i", &filas);
		printf("Columnas: ");
		scanf("%i", &columnas);

		juego(filas, columnas, dificultad, false);
	}
	else if (opcion == 2)
	{
		//TODO: recoger los datos del txt e inicializar los valores de filas columnas y dificultad
		filas = 0;
		columnas = 0;
		dificultad = 0;

		printf("cargar partida\n");
		juego(filas, columnas, dificultad, true);
	}


	system("pause");
	return 0;
}

void juego(const int filas, const int columnas, int dificultad, bool cargar_partida)
{

	bool salir = false;
	int opcion = 0;
	int num_colores = (dificultad == 1) ? 5 : 6;
	const int tam_matriz = filas * columnas;
	int  * matriz = (int *)malloc(tam_matriz * sizeof(int));
	int pos_fila = 0;
	int pos_columna = 0;

	if (cargar_partida)
	{
		//TODO:recoger la matriz serializada deserializarla y guardarla en la variable matriz
		//matriz = 
	}
	else
	{
		generar_matriz(matriz, tam_matriz, num_colores);
	}

	while (!salir)
	{
		//system("cls");
		printf(" ----------------------\n"
			"| 1 = seguir jugando   |\n"
			"| 2 = guardar partida  |\n"
			"| 3 = salir del juego  |\n"
			" ---------------------- \n");
		dibujar_matriz(matriz, filas, columnas);

		printf("Elija opcion: ");
		scanf("%i", &opcion);

		switch (opcion)
		{
		case 1:
		{
				  printf("Introduzca posicion de la casilla (fila/columna):\n");
				  printf("fila: ");
				  scanf("%i", &pos_fila);
				  printf("columna: ");
				  scanf("%i", &pos_columna);
				  jugar(matriz, filas,columnas, filas*columnas*sizeof(int), pos_fila, pos_columna);
				  /*
				  while(hay_ceros)
				  {
				  jugar()
				  }
				  */


				  break;
		}
		case 2:
			break;
		case 3:
		{
				  salir = true;
				  break;
		}
		default:
			break;
		}
	}
}

void generar_matriz(int *& matriz, int tam_matriz, int num_colores)
{
	for (int i = 0; i < tam_matriz; i++)
	{
		matriz[i] = rand() % num_colores + 1;
	}
}

void dibujar_matriz(int * matriz, int filas, int columnas)
{
	printf(" \t");

	for (int i = 0; i < columnas; i++)
	{
		printf("%i   ", i);
	}
	printf("\n\n\n");

	for (int i = 0; i < filas; i++)
	{
		printf("%i\t", i);
		for (int n = 0; n < columnas; n++)
		{
			printf("%i   ", matriz[i * columnas + n]);
		}
		printf("\n");
	}

}

void jugar(int *tablero, int fil, int col, int size,int fila,int columna){
	//Este método lanzará el kernel de juego.
	//Primero creamos la variable que va al device:
	int* tableroD;
	//Reservamos memoria 
	cudaMalloc(&tableroD, size);
	//Copiamos nuestro tablero al device.
	cudaMemcpy(tableroD, tablero, size, cudaMemcpyHostToDevice);
	dim3 DimGrid(1, 1);
	dim3 DimBlock(fil, col);
	KernelJugar << <DimGrid, DimBlock >> >(tableroD, fil, col, fila, columna);
	cudaMemcpy(tablero, tableroD, size, cudaMemcpyDeviceToHost);
	cudaFree(tableroD);
	//Falta mostrarlo
	dibujar_matriz(tablero, fil, col);
}


__global__ void KernelJugar(int *tablero, int fila, int columna, int i, int j){ //fila y columna indican el máximo número en el tablero de juego, i y j las cordenadas del a eliminar.
	//Si el hilo es el que ha seleccionado el jugador:
	int x, y;
	x = threadIdx.x;
	y = threadIdx.y;
	if (x == i && y == j){
		//Ejecutará el comprobar los bloques
		comprobarBloques(tablero, x, y, fila, columna);
	}
	//Espero a la sincronización de hilos.
	__syncthreads();
}

__device__ void comprobarBloques(int *tablero, int x, int y, int fila, int columna){ //X indica la fila, Y la columna
	//Primero compruebo si en algún lateral del tablero En el juego solo puede estar arriba, abajo, derecha o izquierda.Sin diagonales.
	bool fallo = true;
	if (x != 0 && tablero[(x*columna) + y] == tablero[((x*columna) + y) - columna]){//Compruebo arriba
		//La primera comprobación comprueba que no sea la ficha de más arriba, por que si lo es no puede comprobar.
		//Si se cumple es que hay una ficha igual arriba.
		printf("Hola entro aquí que es comprueboArriba");
		fallo = false;
		tablero[(x*columna) + y] = 0;//Lo pasamos a cero para después eliminarlo.
		comprobarBloquesArriba(tablero, x - 1, y, fila, columna);
	}
	if (y != columna - 1 && (y + 1) && tablero[(x*columna) + y] == tablero[((x*columna) + y) + 1]){//Compruebo a la derecha.
		//La primera comprobacion mira si el elemento no es el último de la matriz a la derecha, porque si lo fuera no puede comprobar a la derecha, pues 
		//Ya no habría más derecha.
		//Si se cumple.
		printf("Hola entro aquí que es comprueboDerecha");
		fallo = false;
		tablero[(x*columna) + y] = 0;//Lo pasamos a cero para después eliminarlo. Por si antes no se cumplió
		//Llamo a eliminar derecha.
		comprobarBloquesDerecha(tablero, x, y + 1, fila, columna);
	}
	if (y != 0 && tablero[(x*columna) + y] == tablero[((x*columna) + y) - 1]){ //Compruebo a la izquierda.
		//Si la columna es 0 es que es el elemento de más a la izquierda.
		//Si se cumple llamo a eliminar izquierda.
		printf("Hola entro aquí que es comprueboIzquierda");
		fallo = false;
		tablero[(x*columna) + y] = 0;
		comprobarBloquesIzquierda(tablero, x, y - 1, fila, columna);
	}
	if (x != fila - 1 && tablero[(x*columna) + y] == tablero[((x*columna) + y) + columna]){//Compruebo abajo.
		//La primera comprobación comprubea si no es el elemento de la última fila, en caso afirmativo, no busca más abajo pues no hay.
		//Si se cumple llamo a eliminar abajo.
		printf("Hola entro aquí que es comprueboAbajo");
		fallo = false;
		tablero[(x*columna) + y] = 0;
		comprobarBloquesAbajo(tablero, x + 1, y, fila, columna);
	}
	if (fallo){
		printf("Ninguna combinación posible,vuelve a intentarlo:");
	}
}

__device__ void comprobarBloquesArriba(int *tablero, int x, int y, int fila, int columna){
	//Función que comprueba arriba del bloque inicial si hay más bloques a eliminar.
	tablero[(x*columna) + y] = 0;//Si se llama a esta función, es que el elemento actual también debemos eliminarlo.
	//Misma comprobación que en comprobar bloques normales solo que ya no mira abajo.
	if (x != 0 && tablero[(x*columna) + y] == tablero[((x*columna) + y) - columna]){//Compruebo arriba
		//Si se cumple es que hay una ficha igual arriba.
		printf("Hola entro aquí que es comprueboArriba2");
		comprobarBloquesArriba(tablero, x - 1, y, fila, columna);
	}
	if (y != columna - 1 && (y + 1) && tablero[(x*columna) + y] == tablero[((x*columna) + y) + 1]){//Compruebo a la derecha.
		printf("Hola entro aquí que es comprueboDerecha2");
		//La primera comprobacion mira si el elemento no es el último de la matriz a la derecha, porque si lo fuera no puede comprobar a la derecha, pues 
		//Ya no habría más derecha.
		//Si se cumple.
		//Llamo a eliminar derecha.
		comprobarBloquesDerecha(tablero, x, y + 1, fila, columna);
	}
	if (y != 0 && tablero[(x*columna) + y] == tablero[((x*columna) + y) - 1]){ //Compruebo a la izquierda.
		printf("Hola entro aquí que es comprueboIzquierda2");
		//Si la columna es 0 es que es el elemento de más a la izquierda.
		//Si se cumple llamo a eliminar izquierda.
		comprobarBloquesIzquierda(tablero, x, y - 1, fila, columna);
	}
	else{
		//Si no se cumple en niguna es que la ficha está sola y no se puede hacer una combinación con ella.
		printf("No es posible realizar ningún tipo de combinación con el bloque seleccionado");
	}
}

__device__ void comprobarBloquesDerecha(int *tablero, int x, int y, int fila, int columna){
	//Función que comprueba a la derecha del bloque inicial si hay más bloques a eliminar.
	tablero[(x*columna) + y] = 0;//Si se llama a esta función, es que el elemento actual también debemos eliminarlo.
	//Misma comprobación que en comprobar bloques normales solo que ya no mira a la izquierda.
	if (x != 0 && tablero[(x*columna) + y] == tablero[((x*columna) + y) - columna]){//Compruebo arriba
		//Si se cumple es que hay una ficha igual arriba.
		printf("Hola entro aquí que es comprueboArriba2");
		comprobarBloquesArriba(tablero, x - 1, y, fila, columna);
	}
	if (y != columna - 1 && (y + 1) && tablero[(x*columna) + y] == tablero[((x*columna) + y) + 1]){//Compruebo a la derecha.
		printf("Hola entro aquí que es comprueboDerecha2");
		//La primera comprobacion mira si el elemento no es el último de la matriz a la derecha, porque si lo fuera no puede comprobar a la derecha, pues 
		//Ya no habría más derecha.
		//Si se cumple.
		comprobarBloquesDerecha(tablero, x, y + 1, fila, columna);
		//Llamo a eliminar derecha.
	}
	if (x != fila - 1 && tablero[(x*columna) + y] == tablero[((x*columna) + y) + columna]){//Compruebo abajo.
		printf("Hola entro aquí que es comprueboAbajo2");
		//La primera comprobación comprubea si no es el elemento de la última fila, en caso afirmativo, no busca más abajo pues no hay.
		//Si se cumple llamo a eliminar abajo.
		comprobarBloquesAbajo(tablero, x + 1, y, fila, columna);
	}
}

__device__ void comprobarBloquesIzquierda(int *tablero, int x, int y, int fila, int columna){
	//Función que comprueba a la izquierda del bloque inicial si hay más bloques a eliminar.
	tablero[(x*columna) + y] = 0;//Si se llama a esta función, es que el elemento actual también debemos eliminarlo.
	//Misma comprobación que en comprobar bloques normales solo que ya no mira a la derecha.
	if (x != 0 && tablero[(x*columna) + y] == tablero[((x*columna) + y) - columna]){//Compruebo arriba
		//Si se cumple es que hay una ficha igual arriba.
		printf("Hola entro aquí que es comprueboArriba2");
		comprobarBloquesArriba(tablero, x - 1, y, fila, columna);

	}
	if (y != 0 && tablero[(x*columna) + y] == tablero[((x*columna) + y) - 1]){ //Compruebo a la izquierda.
		//Si la columna es 0 es que es el elemento de más a la izquierda.
		printf("Hola entro aquí que es comprueboIzquierda2");
		//Si se cumple llamo a eliminar izquierda.
		comprobarBloquesIzquierda(tablero, x, y - 1, fila, columna);
	}
	if (x != fila - 1 && tablero[(x*columna) + y] == tablero[((x*columna) + y) + columna]){//Compruebo abajo.
		printf("Hola entro aquí que es comprueboAbajo2");
		//La primera comprobación comprubea si no es el elemento de la última fila, en caso afirmativo, no busca más abajo pues no hay.
		//Si se cumple llamo a eliminar abajo.
		comprobarBloquesAbajo(tablero, x + 1, y, fila, columna);
	}
}

__device__ void comprobarBloquesAbajo(int *tablero, int x, int y, int fila, int columna){
	//Función que comprueba abajo del bloque inicial si hay más bloques a eliminar.
	tablero[(x*columna) + y] = 0;//Si se llama a esta función, es que el elemento actual también debemos eliminarlo.
	//Misma comprobación que en comprobar bloques normales solo que ya no mira arriba
	if (y != columna - 1 && (y + 1) && tablero[(x*columna) + y] == tablero[((x*columna) + y) + 1]){//Compruebo a la derecha.
		printf("Hola entro aquí que es comprueboDerecha2");
		//La primera comprobacion mira si el elemento no es el último de la matriz a la derecha, porque si lo fuera no puede comprobar a la derecha, pues 
		//Ya no habría más derecha.
		//Si se cumple.
		comprobarBloquesDerecha(tablero, x, y + 1, fila, columna);
		//Llamo a eliminar derecha.
	}
	if (y != 0 && tablero[(x*columna) + y] == tablero[((x*columna) + y) - 1]){ //Compruebo a la izquierda.
		printf("Hola entro aquí que es comprueboIzquierda2");
		//Si la columna es 0 es que es el elemento de más a la izquierda.
		//Si se cumple llamo a eliminar izquierda.
		comprobarBloquesIzquierda(tablero, x, y - 1, fila, columna);
	}
	if (x != fila - 1 && tablero[(x*columna) + y] == tablero[((x*columna) + y) + columna]){//Compruebo abajo.
		printf("Hola entro aquí que es comprueboAbajo2");
		//La primera comprobación comprubea si no es el elemento de la última fila, en caso afirmativo, no busca más abajo pues no hay.
		comprobarBloquesAbajo(tablero, x + 1, y, fila, columna);
		//Si se cumple llamo a eliminar abajo.
	}
}

